{"version":3,"sources":["Components/ContactForm/ContactForm.module.css","Components/ContactList/ContactList.module.css","Components/Filter/Filter.module.css","App.module.css","redux/phoneActions.js","redux/phoneReducer.js","redux/phoneStore.js","redux/phoneOperations.js","redux/phoneSelectors.js","Components/ContactList/ContactList.jsx","Components/Filter/Filter.jsx","Components/ContactForm/ContactForm.jsx","App.js","index.js"],"names":["module","exports","phoneActions","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactsRequest","addContactsSuccess","addContactsError","deleteContactsRequest","deleteContactsSuccess","deleteContactsError","filterContact","dataContacts","createReducer","_","action","payload","state","some","contact","name","toLowerCase","alert","filter","id","isLoading","error","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","phoneReducer","devtools","process","axios","defaults","baseURL","phoneOperations","fetchContacts","dispatch","a","get","data","massage","addContact","contactData","completed","post","then","catch","deleteContacts","contactId","delete","getFilter","phoneSelectors","getContacts","getVisisbleContacts","createSelector","normoliseFilter","includes","connect","onDeleteContacts","className","s","map","number","item","tel","btnDel","onClick","value","onChange","event","currentTarget","label","text","type","pattern","title","required","input","onSubmit","useState","setName","setNumber","handleChange","form","preventDefault","placeholder","btnAdd","App","app","titleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1530f039.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2W_mu\",\"label\":\"ContactForm_label__P0oyK\",\"input\":\"ContactForm_input__1ZvyU\",\"btnAdd\":\"ContactForm_btnAdd__1oMJ7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactList_contacts__VqIXr\",\"item\":\"ContactList_item__danE7\",\"name\":\"ContactList_name__hjZdK\",\"tel\":\"ContactList_tel__2ahXj\",\"btnDel\":\"ContactList_btnDel__m1Hp-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__280DZ\",\"label\":\"Filter_label__1bB2F\",\"text\":\"Filter_text__2TVRR\",\"input\":\"Filter_input__3zFae\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2P9dk\",\"title\":\"App_title__2M86W\",\"titleContacts\":\"App_titleContacts__2TSLT\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\n//!синхронный Action который дойдет до reducer\r\n\r\n//в ожидании (pending)\r\nconst fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\n//выполнено (fulfilled)\r\nconst fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\n//отклоненный (rejected)\r\nconst fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nconst addContactsRequest = createAction('contacts/addContactsRequest');\r\nconst addContactsSuccess = createAction('contacts/addContactsSuccess');\r\nconst addContactsError = createAction('contacts/addContactsError');\r\n\r\nconst deleteContactsRequest = createAction('Contacts/deleteContactsRequest');\r\nconst deleteContactsSuccess = createAction('Contacts/deleteContactsSuccess');\r\nconst deleteContactsError = createAction('Contacts/deleteContactsError');\r\n\r\nconst filterContact = createAction('Contacts/filterContact');\r\n\r\nconst phoneActions = {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactsRequest,\r\n  addContactsSuccess,\r\n  addContactsError,\r\n  deleteContactsRequest,\r\n  deleteContactsSuccess,\r\n  deleteContactsError,\r\n  filterContact,\r\n};\r\nexport default phoneActions;\r\n","import { createReducer, combineReducers } from '@reduxjs/toolkit';\r\n\r\nimport phoneActions from './phoneActions';\r\n\r\nconst dataContacts = createReducer([], {\r\n  [phoneActions.fetchContactsSuccess]: (_, action) => action.payload,\r\n  [phoneActions.addContactsSuccess]: (state, action) => {\r\n    if (\r\n      state.some(\r\n        contact =>\r\n          contact.name.toLowerCase() === action.payload.name.toLowerCase(),\r\n      )\r\n    ) {\r\n      alert(`This contact already exists`);\r\n      return;\r\n    }\r\n    return [...state, action.payload];\r\n  },\r\n  [phoneActions.deleteContactsSuccess]: (state, action) =>\r\n    state.filter(contact => contact.id !== action.payload),\r\n});\r\n\r\nconst isLoading = createReducer(false, {\r\n  [phoneActions.fetchContactsRequest]: () => true,\r\n  [phoneActions.fetchContactsSuccess]: () => false,\r\n  [phoneActions.fetchContactsError]: () => false,\r\n\r\n  [phoneActions.addContactsRequest]: () => true,\r\n  [phoneActions.addContactsSuccess]: () => false,\r\n  [phoneActions.addContactsError]: () => false,\r\n\r\n  [phoneActions.deleteContactsRequest]: () => true,\r\n  [phoneActions.deleteContactsSuccess]: () => false,\r\n  [phoneActions.deleteContactsError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [phoneActions.filterContact]: (_, action) => action.payload,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [phoneActions.fetchContactsError]: (_, action) => action.payload,\r\n  [phoneActions.fetchContactsRequest]: () => null,\r\n});\r\n\r\n//const error = createReducer(null, {});\r\n\r\nexport default combineReducers({\r\n  dataContacts,\r\n  isLoading,\r\n  filter,\r\n  error,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport logger from 'redux-logger';\r\nimport phoneReducer from './phoneReducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: phoneReducer,\r\n  },\r\n  middleware,\r\n  devtools: process.env.NODE_ENV !== 'development',\r\n});\r\n","import axios from 'axios';\r\nimport phoneActions from './phoneActions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3000';\r\n//fetchContacts - операция, она использует синхронные медоты phoneActions по http запросу.\r\n//до, успех и ошибка\r\n//-----------------fetchContacts---------------------------\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(phoneActions.fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(phoneActions.fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(phoneActions.fetchContactsError(error.massage));\r\n  }\r\n};\r\n\r\n//-----------------addContact---------------------------\r\nconst addContact = contactData => dispatch => {\r\n  const contact = {\r\n    contactData,\r\n    completed: false,\r\n  };\r\n\r\n  dispatch(phoneActions.addContactsRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(phoneActions.addContactsSuccess(data)))\r\n    .catch(error => dispatch(phoneActions.addContactsError(error.massage)));\r\n};\r\n\r\n\r\n//-----------------deleteContacts---------------------------\r\nconst deleteContacts = contactId => dispatch => {\r\n  dispatch(phoneActions.deleteContactsRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(phoneActions.deleteContactsSuccess(contactId)))\r\n    .catch(error => dispatch(phoneActions.deleteContactsError(error.massage)));\r\n};\r\n\r\nconst phoneOperations = { fetchContacts, addContact, deleteContacts }\r\nexport default phoneOperations ;\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getContacts = state => state.contacts.isLoading;\r\nconst getFilter = state => state.contacts.filter;\r\nconst getAllContacts = state => state.contacts.dataContacts;\r\n//-----------------поиск по фильтру\r\nconst getVisisbleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n    (contacts, filter) => {\r\n        const normoliseFilter = filter.toLowerCase();\r\n\r\n        return contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normoliseFilter),\r\n  );\r\n  },\r\n);\r\n\r\nconst phoneSelectors = { getContacts, getFilter, getVisisbleContacts };\r\n\r\nexport default phoneSelectors;\r\n\r\n\r\n\r\n//другой способ\r\n// const getVisisbleContacts = state => {\r\n//   const contacts = getAllContacts(state);\r\n//   const filter = getFilter(state);\r\n//   const normoliseFilter = filter.toLowerCase();\r\n\r\n//   return contacts.filter(contact =>\r\n//     contact.name.toLowerCase().includes(normoliseFilter),\r\n//   );\r\n// };","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport phoneOperations from '../../redux/phoneOperations';\nimport phoneSelectors from '../../redux/phoneSelectors';\n\nimport s from './ContactList.module.css';\n\nconst ContactList = ({contacts, onDeleteContacts}) => {\n\n  return (\n    <ul className={s.contacts}>\n      {contacts.map(({ id, name, number }) => (\n        <li className={s.item} key={id}>\n          <p className={s.name}>{name}</p>\n          <p className={s.tel}>{number}</p>\n          <button className={s.btnDel} onClick={() => onDeleteContacts(id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  contacts: phoneSelectors.getVisisbleContacts(state),\n});\n\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContacts: id => dispatch(phoneOperations.deleteContacts(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport phoneActions from '../../redux/phoneActions';\nimport phoneSelectors from '../../redux/phoneSelectors';\nimport s from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => (\n  <div className={s.filter}>\n    <label className={s.label}>\n      <p className={s.text}>Find contacts by name</p>\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        value={value}\n        onChange={onChange}\n        className={s.input}\n      />\n    </label>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  value: phoneSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: event => dispatch(phoneActions.filterContact(event.currentTarget.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport phoneOperations from '../../redux/phoneOperations';\n\nimport s from './ContactForm.module.css';\n\nfunction ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  //ввод в интпут\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  //добавить контакт через кнопку\n  const handleSabmit = event => {\n    event.preventDefault();\n\n    onSubmit({ name, number });\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSabmit}>\n      <label className={s.label}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder = \"Name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handleChange}\n          className={s.input}\n        />\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n           placeholder = \"Number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handleChange}\n          className={s.input}\n        />\n      </label>\n      <button type=\"sabmit\" className={s.btnAdd}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: value => dispatch(phoneOperations.addContact(value)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","//Components\nimport ContactList  from './Components/ContactList/ContactList';\nimport Filter from './Components/Filter/Filter';\nimport ContactForm from './Components/ContactForm/ContactForm';\n\nimport s from './App.module.css';\n\nfunction App() {\n  return (\n    <div className={s.app}>\n      <h1 className={s.title}>Phonebook</h1>\n      <ContactForm />\n\n      <h2 className={s.titleContacts}>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './redux/phoneStore';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}